<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>如何使用hexo搭建我们自己的博客系统</title>
    <link href="/2022/04/23/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/"/>
    <url>/2022/04/23/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="1-hexo是什么"><a href="#1-hexo是什么" class="headerlink" title="1 hexo是什么"></a>1 hexo是什么</h1><p><a href="https://hexo.io/zh-cn/">Hexo</a>是一个博客框架，使用markdown语法写作，一键编译生成静态文件，一键部署到github或gitlab或gitee等同性交友网站，实现博客搭建，是居家旅行、吹牛装逼的必备工具。</p><h1 id="2-初始化hexo博客项目"><a href="#2-初始化hexo博客项目" class="headerlink" title="2 初始化hexo博客项目"></a>2 初始化hexo博客项目</h1><p>首先安装node环境（自己百度解决吧，有空再补一篇文章讲它），然后全局安装 hexo-cli ：</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">cnpm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>安装成功后，使用 hexo init 命令初始化项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init myblog  <span class="hljs-comment"># 会在当前目录下创建一个myblog目录</span><br></code></pre></td></tr></table></figure><h1 id="3-创作文章"><a href="#3-创作文章" class="headerlink" title="3 创作文章"></a>3 创作文章</h1><p>进入myblog目录，执行以下命令可以创建一篇新文章，标题为test：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>hexo会在<code>source/_posts</code>目录下创建一个<code>test.md</code>文件，我们在这里使用markdown语法写博客即可：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: test<br>date: 2022-04-22 21:17:39<br>tags: hexo<br><span class="hljs-section">categories: 教程</span><br><span class="hljs-section">---</span><br><br><span class="hljs-section"># 一级标题</span><br><br><span class="hljs-section">## 二级标题</span><br><br>这里开始我们的写作吧<br></code></pre></td></tr></table></figure><p>上面文件最上方以<code>---</code>分隔的区域，用于指定文章属性（<a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter | Hexo</a>），常用的属性就是<code>title</code>, <code>date</code>, <code>tag</code>, <code>categories</code>，分别指定文章标题、建立日期、标签和分类。其中标题和建立日期都是自动生成的，我们不用管。tag和categories一般是由我们自己设置的。</p><p>hexo中的分类categories和标签tag的区别在于：<strong>categories编译后对应的是一个分类目录，而tag只是一个标记</strong>：</p><p><img src="/2022/04/23/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/image-20220422222801751.png" alt="image-20220422222801751"></p><p><strong>一篇文章只能包含一个分类，但是可以包含多个标签。</strong></p><p>在我的博客中，我会根据文章类型不同，设置“随笔”、“读书”、“课程”、“技术教程”、“产品分析”五个分类；再根据文章内容添加一些标签，例如“python”、“人工智能”、“区块链”、“生鲜电商”、“供应链”等标识技术领域的关键字。</p><p>细心的同学已经观察到了，我们使用<code>hexo new &lt;title&gt;</code>命令创建的文章，是被放到了<code>source/_posts</code>目录下。事实上，<code>post</code>是hexo文章的一种布局，**hexo一共支持3种布局方式：<code>post</code>、<code>page</code>、<code>draft</code>**，使用下面的命令可以创建指定布局的文章：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new post &lt;title&gt;<br>hexo new page &lt;title&gt;<br>hexo new draft &lt;title&gt;<br></code></pre></td></tr></table></figure><p>其中**<code>post</code>布局的文章<strong>会被创建到<code>source/_posts</code>目录下，</strong>表示这是要被发表的文章<strong>；<code>page</code>布局的文章会在<code>source</code>目录下创建一个以<code>&lt;title&gt;</code>命名的文件夹，在文件夹下再创建一个<code>index.md</code>，这是个啥意思我也不懂，但是我们一般不用它，因为我们已经使用了<code>tag</code>和<code>categories</code>，就没法使用<code>page</code>了；</strong><code>draft</code>布局的文章<strong>会被创建到<code>source/_drafts</code>目录下，</strong>表示这是一个草稿**，当使用<code>hexo generate</code>命令编译时，不会被编译成静态页面。</p><p><img src="/2022/04/23/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/image-20220422214559662.png" alt="image-20220422214559662"></p><p>如果我们想预览草稿，可以在编译时添加<code>--draft</code>参数：<code>hexo generate --draft</code>。如果我们想把<strong>草稿发布</strong>，可以使用<code>hexo publish &lt;title&gt;</code>命令。</p><p>写完文章后，我们先使用<code>hexo clean</code>命令清除之前编译的站点页面。</p><p>然后使用<code>hexo generate</code>命令编译出静态站点页面（保存在<code>source/public</code>中）。</p><p>最后使用<code>hexo server</code>命令就可以在本地预览：</p><p><img src="/2022/04/23/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/image-20220422215558321.png" alt="image-20220422215558321"></p><p>访问<code>http://localhost:4000</code>：</p><p><img src="/2022/04/23/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/image-20220422215705942.png" alt="image-20220422215705942"></p><p>小提示：在hexo3中新增了hexo-server，支持hexo监视文件变动并自动更新，无需重启服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">cnpm install hexo-server --save<br>hexo server<br></code></pre></td></tr></table></figure><h1 id="4-部署到Github"><a href="#4-部署到Github" class="headerlink" title="4 部署到Github"></a>4 部署到Github</h1><p>hexo最牛逼的地方在于，可以把博客部署到github、gitlab、gitee、gitcode等git代码网站上，利用它们提供的pages服务提供博客服务。</p><p>这是因为hexo编译生成的是一个静态网站，而pages服务就是提供静态网站访问服务的。</p><p><img src="/2022/04/23/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/image-20220422220102259.png" alt="image-20220422220102259"></p><p>1、创建一个github仓库，开通pages服务。</p><p>2、安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexojs/hexo-deployer-git: Git deployer plugin for Hexo. (github.com)</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cnpm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>3、修改博客配置（<code>_config.yml</code>）:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:xxxx/xxxx.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>4、生成站点文件并推送至远程仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean  <span class="hljs-comment"># 保险起见，每次我们都清空一下</span><br>hexo deploy --generate<br></code></pre></td></tr></table></figure><p>5、登入 Github/BitBucket/Gitlab，请在库设置（Repository Settings）中将默认分支设置为<code>_config.yml</code>配置中的分支名称。<strong>稍等片刻</strong>（github后台在使用Travis CI自动部署），您的站点就会显示在您的Github Pages中。</p><p>此外，如果您的 Github Pages 需要使用 CNAME 文件<strong>自定义域名</strong>，请将 CNAME 文件置于 <code>source</code> 目录下，只有这样 <code>hexo deploy</code> 才能将 CNAME 文件一并推送至部署分支。</p><p>更多参考：<a href="https://hexo.io/zh-cn/docs/one-command-deployment">部署 | Hexo</a></p><h1 id="5-配置博客"><a href="#5-配置博客" class="headerlink" title="5 配置博客"></a>5 配置博客</h1><p>为了使我们的博客更加美观易用，我们还需要做一些配置工作。</p><h2 id="5-1-插入图片到本地"><a href="#5-1-插入图片到本地" class="headerlink" title="5.1 插入图片到本地"></a>5.1 插入图片到本地</h2><p>一般来说，我们在使用markdown笔记写作最大的痛点就在于图片的保存。我们可以使用在线图床保存图片，然后直接插入一个图片链接，这种方式的缺点在于需要使用稳定图床（一般付费），否则过段时间可能图片就没了。</p><p>亦或者可以把图片插入到本地，使用相对路径访问（使用typora可以很方便把图片插入到本地指定目录，具体可以参考 <a href="https://mp.weixin.qq.com/s/1Cl86o2nix8mb_msue0HPA">https://mp.weixin.qq.com/s/1Cl86o2nix8mb_msue0HPA</a> 这篇文章中的配置方法）。这种方式的缺点在于，当我们使用hexo部署时，会出现图片访问不到的情况。</p><p><strong>其实我们是可以把图片插入到本地，让hexo把它编译成静态资源，同我们的blog一同部署，可以省去使用在线图床的额外费用开支，同时也方便我们的文章数据迁移。</strong></p><p>1、安装<a href="https://github.com/hexojs/hexo-renderer-marked">hexojs/hexo-renderer-marked: Markdown renderer for Hexo (github.com)</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cnpm install hexo-renderer-marked --save<br></code></pre></td></tr></table></figure><p>2、配置hexo（_config.yml）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 打开资源文件管理功能，每次创建文章时，会在文章同目录下创建一个同名资源文件夹</span><br><span class="hljs-attr">marked:</span>  <span class="hljs-comment"># 使用hexo-renderer-marked修正图片链接</span><br>  <span class="hljs-attr">prependRoot:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">postAsset:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>Once enabled, an asset image will be automatically resolved to its corresponding post’s path. For example, “image.jpg” is located at “/2020/01/02/foo/image.jpg”, meaning it is an asset image of “/2020/01/02/foo/“ post, <code>![](image.jpg)</code> will be rendered as <code>&lt;img src=&quot;/2020/01/02/foo/image.jpg&quot;&gt;</code>.</p><p>至此，我们就可以把图片放置到资源文件夹里，给文章使用了：</p><p><img src="/2022/04/23/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/image-20220422224841603.png" alt="image-20220422224841603"></p><p><code>clean &amp;&amp; generate</code>后，重新访问博客，可以看到图片被完美显示：</p><p><img src="/2022/04/23/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/image-20220422224950648.png" alt="image-20220422224950648"></p><p>但是，这里还有一个问题：每次插入图片时过于繁琐，能不能直接像word那样复制粘贴，就完成图片的插入？</p><p>答案是可以的，这里我们<strong>使用vscode+Paste Image插件实现</strong>（Paste Image可以实现把图片放置到本地指定目录下，同时图片链接可以设置为指定格式，目前这是typora做不到的）。</p><p>1、在vscode下安装Paste Image插件：</p><p><img src="/2022/04/23/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/image-20220422225337435.png" alt="image-20220422225337435"></p><p>2、在vscode配置文件中修改Paste Image配置参数：</p><p><img src="/2022/04/23/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/image-20220422225543501.png" alt="image-20220422225543501"></p><p><img src="/2022/04/23/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/image-20220422225618220.png" alt="image-20220422225618220"></p><p><img src="/2022/04/23/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/image-20220422230416111.png" alt="image-20220422230416111"></p><p>这两个配置，一个表示将剪切板中的图片放到当前文件夹下的文件同名文件夹内，一个表示设置插入连接格式为图片名称。</p><p>保存配置后，用vscode打开我们的hexo博客文件夹，打开一个markdown文章，就可以使用<code>Ctrl+Alt+V</code> 或<code>Cmd+Alt+V</code>快捷键将图片自动插入文章资源文件夹并修改图片链接为图片名称了：</p><p><img src="/2022/04/23/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/image-20220422230730510.png" alt="image-20220422230730510"></p><p>从此，妈妈再也不用担心我写博客插入图片了。</p><p>备注：我一般用typora记录本地笔记，用百度网盘或nas多设备同步；用vscode写hexo博客。</p><p>更多参考：<a href="https://hexo.io/zh-cn/docs/asset-folders">资源文件夹 | Hexo</a></p><h2 id="5-2-配置站点信息"><a href="#5-2-配置站点信息" class="headerlink" title="5.2 配置站点信息"></a>5.2 配置站点信息</h2><p>修改<code>_config.yml</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Site</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Jimmy嘚啵嘚</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">&#x27;JimmyWang的个人博客&#x27;</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;主要涉猎内容为开发技术、架构设计、产品设计、商业分析等内容，不想当CEO的程序员不是好程序员&#x27;</span><br><span class="hljs-attr">keywords:</span> <br><span class="hljs-attr">author:</span> <span class="hljs-string">&#x27;Jimmy Wang&#x27;</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="5-3-配置主题"><a href="#5-3-配置主题" class="headerlink" title="5.3 配置主题"></a>5.3 配置主题</h2><p>hexo的默认主题一言难尽，不是那么好看。</p><p>这里我们选用<a href="https://zhuanlan.zhihu.com/p/137679728">张凯强</a>大佬与人合作开发的主题：  <a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid-dev/hexo-theme-fluid: 一款 Material Design 风格的 Hexo 主题 / An elegant Material-Design theme for Hexo (github.com)</a></p><p>无他，就是文档全中文，该有的全都有了，最重要的是整合了LaTeX和mermaid的支持，层次性也优于Next这种扁平化的设计，对于结构强迫症患者来说是福音。</p><p><img src="/2022/04/23/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/image-20220423095858679.png" alt="image-20220423095858679"></p><p>这主题的逼格是不是一下就上去了。</p><p>安装上，我选择直接下载release源码，解压到hexo项目<code>themes</code>目录下，重命名为<code>fluid</code>，然后修改hexo配置文件<code>_config.yml</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment"># 指定主题</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-comment"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><p>具体安装可以参考：<a href="https://hexo.fluid-dev.com/docs/start/">开始使用 | Hexo Fluid 用户手册 (fluid-dev.com)</a></p><p>配置可以参考<a href="https://hexo.fluid-dev.com/docs/guide/">配置指南 | Hexo Fluid 用户手册 (fluid-dev.com)</a>，文档是中文的，很方便。</p><p>这里给出我在用的部分配置：</p><h3 id="1、创建about页"><a href="#1、创建about页" class="headerlink" title="1、创建about页"></a>1、创建about页</h3><p>fluid主题默认是没有设置about页面的，需要我们手动添加。</p><p>先在hexo项目中创建about页面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page about<br></code></pre></td></tr></table></figure><p>创建成功后修改 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性。</p><p>修改后的文件示例如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">标题</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">这里写关于页的正文，支持</span> <span class="hljs-string">Markdown,</span> <span class="hljs-string">HTML</span><br></code></pre></td></tr></table></figure><h3 id="2、用自定义配置覆盖主题默认配置"><a href="#2、用自定义配置覆盖主题默认配置" class="headerlink" title="2、用自定义配置覆盖主题默认配置"></a>2、用自定义配置覆盖主题默认配置</h3><p>这里主要是避免更新主题造成原有主题目录内我们配置好的配置被覆盖。</p><p>我们只需要在hexo博客目录下创建<code>_config.fluid.yml</code>文件，把主题的<code>_config.yml</code>全部配置复制过去即可。只要hexo目录下有了<code>_config.fluid.yml</code>文件，主题目录下的<code>_config.yml</code>就会失效，这是覆盖式的。</p><p><strong>关于主题的升级：</strong></p><p>可以从主题github上下载最新的release源码，解压到博客themes目录下，替换原有主题目录。</p><p>建议升级前先备份原有主题，用于升级失败进行回退。</p><p>如果某些配置发生了变化（改名或弃用），release 的说明里会特别提示，同步修改原配置文件即可。</p><h3 id="3、修改banner-img"><a href="#3、修改banner-img" class="headerlink" title="3、修改banner_img"></a>3、修改banner_img</h3><p>默认每个页面头部是一张紫色的背景，这其实是在配置文件中的banner_img字段中配置，默认指向的是fluid主题目录下的<code>source/img/default.png</code>。因为每一个页面都要设置banner_img，我为了偷懒，直接找了一张我喜欢的图片，替换掉了default.png，注意要压缩下大小，别一个图片几MB，用户加载时就要骂娘了。</p><p>其次，这张banner_img显示的太大了，我把所有页面的banner_img_height都设置为了30，减小了图片高度。</p><h3 id="4、修改页面标题和一些图标"><a href="#4、修改页面标题和一些图标" class="headerlink" title="4、修改页面标题和一些图标"></a>4、修改页面标题和一些图标</h3><p>进入到fluid配置页，可以看到各个页面的配置项，一目了然，一一修改对应的字段即可，因为涉及到的内容非常多，这里不再一一赘述，如果有不明白的地方去查询官方配置说明。</p><h3 id="5、开启mermaid支持"><a href="#5、开启mermaid支持" class="headerlink" title="5、开启mermaid支持"></a>5、开启mermaid支持</h3><p>我曾经在<a href="https://mp.weixin.qq.com/s/NIBV5fGj6hGDBZ8m1CdI_w">《使用typora画图》</a>中介绍了mermaid库，可以让我们的markdown笔记方便实现各种图绘制。</p><p>fluid支持mermaid绘图，但是默认是关闭的，需要修改配置打开：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">in</span> <span class="hljs-string">_config.fluid.yaml</span><br><br>  <span class="hljs-comment"># 流程图，基于 mermaid-js，具体请见：https://hexo.fluid-dev.com/docs/guide/#mermaid-流程图</span><br>  <span class="hljs-comment"># Flow chart, based on mermaid-js, see: https://hexo.fluid-dev.com/docs/en/guide/#mermaid</span><br>  <span class="hljs-attr">mermaid:</span><br>    <span class="hljs-comment"># 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `mermaid: true`</span><br>    <span class="hljs-comment"># If you want to use mermaid on the custom page, you need to set `mermaid: true` in Front-matter</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 这里修改为true</span><br><br>    <span class="hljs-comment"># 开启后，只有在文章 Front-matter 里指定 `mermaid: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度</span><br>    <span class="hljs-comment"># If true, only set `mermaid: true` in Front-matter will enable mermaid, to load faster when the page does not contain mermaid</span><br>    <span class="hljs-attr">specific:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 这里修改为true，目的是提高不包含公式的页面的加载速度</span><br><br>    <span class="hljs-comment"># See: http://mermaid-js.github.io/mermaid/</span><br>    <span class="hljs-attr">options:</span> &#123; <span class="hljs-attr">theme:</span> <span class="hljs-string">&#x27;default&#x27;</span> &#125;<br></code></pre></td></tr></table></figure><p>注意，如果设置了<code>specific: true</code>，则需要在文章 <a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter</a>里指定 <code>mermaid: true</code> 才会在文章页启动流程图渲染，以便在页面不包含流程图时提高加载速度。例如：</p><p><img src="/2022/04/23/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/image-20220423233828360.png" alt="image-20220423233828360"></p><h3 id="6、开启LaTeX数学公式"><a href="#6、开启LaTeX数学公式" class="headerlink" title="6、开启LaTeX数学公式"></a>6、开启LaTeX数学公式</h3><p>fluid默认支持LaTeX数学公式，但是需要配置才能开启：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 数学公式，开启之前需要更换 Markdown 渲染器，否则复杂公式会有兼容问题，具体请见：https://hexo.fluid-dev.com/docs/guide/##latex-数学公式</span><br><span class="hljs-comment"># Mathematical formula. If enable, you need to change the Markdown renderer, see: https://hexo.fluid-dev.com/docs/en/guide/#math</span><br><span class="hljs-attr">math:</span><br>  <span class="hljs-comment"># 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `math: true`</span><br>  <span class="hljs-comment"># If you want to use math on the custom page, you need to set `math: true` in Front-matter</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 开启后，只有在文章 Front-matter 里指定 `math: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度</span><br>  <span class="hljs-comment"># If true, only set `math: true` in Front-matter will enable math, to load faster when the page does not contain math</span><br>  <span class="hljs-attr">specific:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># Options: mathjax | katex</span><br>  <span class="hljs-attr">engine:</span> <span class="hljs-string">mathjax</span><br></code></pre></td></tr></table></figure><p>这里同mermaid，如果设置了<code>specific: true</code>，则需要在文章 <a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter</a>里指定 <code>math: true</code> 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度。</p><p>engine: 公式引擎，目前支持 <a href="https://www.mathjax.org/">MathJax | Beautiful math in all browsers.</a> 或 <a href="https://katex.org/">KaTeX – The fastest math typesetting library for the web</a> 。</p><h3 id="7、开启评论"><a href="#7、开启评论" class="headerlink" title="7、开启评论"></a>7、开启评论</h3><p>这里直接使用utterances插件（使用github的issues存储评论），fluid也帮我们内置好了，直接修改fluid配置文件即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 评论插件</span><br>  <span class="hljs-comment"># Comment plugin</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 指定的插件，需要同时设置对应插件的必要参数</span><br>    <span class="hljs-comment"># The specified plugin needs to set the necessary parameters at the same time</span><br>    <span class="hljs-comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">utterances</span><br><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 评论插件</span><br><span class="hljs-comment"># Comment plugins</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 开启评论需要先设置上方 `post: comments: enable: true`，然后根据 `type` 设置下方对应的评论插件参数</span><br><span class="hljs-comment"># Enable comments need to be set `post: comments: enable: true`, then set the corresponding comment plugin parameters below according to `type`</span><br><span class="hljs-comment">#---------------------------</span><br><br><span class="hljs-comment"># Utterances</span><br><span class="hljs-comment"># 基于 GitHub Issues</span><br><span class="hljs-comment"># Based on GitHub Issues</span><br><span class="hljs-comment"># See: https://utteranc.es</span><br><span class="hljs-attr">utterances:</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">user-name/repo-name</span>  <span class="hljs-comment"># 按照这种格式设置repo</span><br>  <span class="hljs-attr">issue_term:</span> <span class="hljs-string">pathname</span><br>  <span class="hljs-attr">label:</span> <span class="hljs-string">utterances</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">github-light</span><br>  <span class="hljs-attr">theme_dark:</span> <span class="hljs-string">github-dark</span><br>  <span class="hljs-attr">crossorigin:</span> <span class="hljs-string">anonymous</span><br></code></pre></td></tr></table></figure><p>注意，在让utterances生效之前，还需要在我们的github上安装utterances app：</p><p>打开utterances官网：<a href="https://utteranc.es/">https://utteranc.es/</a></p><p><img src="/2022/04/23/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/2022-04-24-08-38-58.png"></p><p><img src="/2022/04/23/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/2022-04-24-08-39-23.png"></p><p><img src="/2022/04/23/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/2022-04-24-08-40-14.png"></p><p><img src="/2022/04/23/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/2022-04-24-08-40-48.png"></p><p>小提示：如果设置后评论模块没有显示，说明配置没有完成，或者配置有误出现报错（请在浏览器控制台查看具体报错）</p><h1 id="6-如何删除一篇文章？"><a href="#6-如何删除一篇文章？" class="headerlink" title="6 如何删除一篇文章？"></a>6 如何删除一篇文章？</h1><p>我们可以直接在<code>source/_posts</code>目录下删除一篇文章（包括它的同名asset文件架），然后先执行<code>hexo clean</code>清除编译结果，然后重新使用<code>hexo generate</code>命令编译静态页面。</p><p>如果我们不使用<code>clean</code>命令直接<code>generate</code>，会发现我们删除的文章还在静态页面里。因为这个<code>generate</code>是一个增量编译，仅新增或更新，不会全部替换。</p><h1 id="7-增加域名解析"><a href="#7-增加域名解析" class="headerlink" title="7 增加域名解析"></a>7 增加域名解析</h1><p>github提供的域名一般是<code>repo-name.github.io</code>的形式。也可以绑定自己购买的域名，具体操作如下：</p><p>1、在博客项目的<code>source</code>目录下创建CNAME文件：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">www<span class="hljs-selector-class">.jimmy-wang</span>.com<br></code></pre></td></tr></table></figure><p>这样每次<code>hexo generate</code>时，hexo都会把CNAME文件重新放置到public目录下，这样就可以随着其他站点文件一起上传github。</p><p>小提示：直接在github项目的<code>settings-&gt;options-&gt;github pages</code>的<code>custom domain</code>中设置域名，本质上是由github帮你在仓库根目录下创建一个CNAME文件，但是每次重新<code>hexo delpoy</code>后会把由github创建的CNAME文件删除。</p><p>2、进入我们的域名服务商控制台，配置域名解析：</p><p><img src="/2022/04/23/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/2022-04-24-12-50-10.png"></p><p>等几分钟域名解析生效后，就可以使用我们购买的域名访问博客了。</p><p>提示：如果无法访问，一方面要检查你的解析项配置，另一方面要检查你的域名有无实名认证。实在不行，就给你的域名服务商提技术支持工单吧，让他们给你看看解析问题。</p><h1 id="8-最后的提示：备份hexo项目"><a href="#8-最后的提示：备份hexo项目" class="headerlink" title="8 最后的提示：备份hexo项目"></a>8 最后的提示：备份hexo项目</h1><p>至此为止，我们已经得到了一个看起来还不错的、写起来也很方便的博客。</p><p>虽然我们已经把博客发布到了github，但是我们的博客项目本身还没有备份。</p><p>项目文件备份有2个比较方便的办法：</p><p>一个是使用百度网盘同步空间或NAS同步，直接把我们的项目同步到网盘上去。</p><p>另一个是使用github，我们可以把项目源码上传到我们的主页仓库的source分支上去。</p><p>具体用哪个，就是仁者见仁、智者见智的事情了。</p><p>这里提示一点，如果选择了使用github同步，一定要在你的<code>.gitignore</code>文件里把<code>node_modules</code>和<code>public</code>文件夹添加进去，因为这俩货上传了也没啥用。</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo, 博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
